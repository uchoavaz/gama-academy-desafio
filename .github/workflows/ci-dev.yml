on:
  push:
    branches: [ dev ]

name: Deploy to Amazon ECS

jobs:
  deploy-aws-DEV:
    name: Deploy/Destroy AWS Infra DEV
    runs-on: ubuntu-latest
    environment: dev
    env:
      AWS_ACCOUNT_REGION: "us-east-1"
      BUCKET: "gama-academy-terraform-state"
      TERRAFORM_VERSION: "1.0.1"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
  
    - name: Install terraform     
      run: |
        sudo wget https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_1.0.1_linux_amd64.zip
        sudo unzip terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
        sudo sudo mv terraform /usr/local/bin/

    - name: Aws Credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws configure set region ${{ env.AWS_ACCOUNT_REGION }}

    - name: Create bucket for terraform state
      run: |
        aws s3 mb s3://${{ env.BUCKET }}

    - name: Terraform Init
      run: |
        cd infra
        terraform init

    - name: Terraform Apply/Destroy
      run: |
        if [ "$(cat terraform_ci_state/terraform_command_dev)" == "apply" ]; then cd infra && terraform workspace select dev && terraform apply -var-file="envs/desafio-dev.tfvars" --auto-approve && echo "DESTROY=false" >> $GITHUB_ENV; elif [ "$(cat terraform_ci_state/terraform_command_dev)" == "destroy" ]; then cd infra && terraform workspace select dev && terraform destroy -var-file="envs/desafio-dev.tfvars" --auto-approve && echo "DESTROY=true" >> $GITHUB_ENV; fi

    - name: Cancel next jobs
      uses: andymckay/cancel-action@0.2
      if: ${{ env.DESTROY == 'true'}}

  push-image-dev:
    name: Push image to ECR
    runs-on: ubuntu-latest
    environment: dev
    needs: deploy-aws-dev
    env:
      IMAGE_VERSION: "latest"
      DOCKER_USERNAME: AWS
      REPOSITORY_NAME: "desafio/app"
      AWS_ACCOUNT_REGION: "us-east-1"

    steps:
    - name: Checkout
      uses: actions/checkout@v2
  
    - name: Aws Credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws configure set region ${{ env.AWS_ACCOUNT_REGION }}

    - name: Install aws cli     
      run: |
        sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        sudo unzip awscliv2.zip

    - name: Get Account ID     
      run: |
        echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

    - name: Build docker image
      run: |
        sudo docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ env.REPOSITORY_NAME }}:${{ env.IMAGE_VERSION }} .

    - name: Push docker image
      run: |
        PASSWORD=$(aws ecr get-login-password)
        sudo docker login --username ${{ env.DOCKER_USERNAME }} -p $PASSWORD ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
        sudo docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_ACCOUNT_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${{ env.IMAGE_VERSION }}

  deploy-app-DEV:
    name: Deploy app to ECS
    runs-on: ubuntu-latest
    environment: dev
    needs: push-image-dev
    env:
      IMAGE_VERSION: "latest"
      REPOSITORY_NAME: "desafio/app"
      AWS_ACCOUNT_REGION: "us-east-1"
      APP_NAME: "app"
      CLUSTER_NAME: "desafio"

    steps:
    - name: Checkout
      uses: actions/checkout@v2
  
    - name: Aws Credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws configure set region ${{ env.AWS_ACCOUNT_REGION }}

    - name: Install aws cli     
      run: |
        sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        sudo unzip awscliv2.zip
  
    - name: Get Account ID     
      run: |
        echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

    - name: deploy app
      run: |
        ECR_IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_ACCOUNT_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${{ env.IMAGE_VERSION }}"
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.APP_NAME }} --region ${{ env.AWS_ACCOUNT_REGION }})
        NEW_TASK_DEFINTION=$(sudo echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
        NEW_TASK_INFO=$(aws ecs register-task-definition --region "${{ env.AWS_ACCOUNT_REGION }}" --cli-input-json "${NEW_TASK_DEFINTION}")
        NEW_REVISION=$(sudo echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
        OUTPUT=$(aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service $APP_NAME --task-definition ${{ env.APP_NAME }}:$NEW_REVISION --region ${{ env.AWS_ACCOUNT_REGION }})